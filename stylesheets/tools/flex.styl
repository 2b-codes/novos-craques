/*
	Se mesmo com as explicações tiver dúvida de como funciona tem o site
	https://css-tricks.com/snippets/css/a-guide-to-flexbox/
*/

flexDirection($direction = "row") {
	/* 
		This establishes the main-axis, thus defining 
		the direction flex items are placed in the flex container. 
		Flexbox is (aside from optional wrapping) a single-direction 
		layout concept. Think of flex items as primarily laying out 
		either in horizontal rows or vertical columns.
			
			OPTIONS:
				row (default): left to right in ltr right to left in rtl
				row-reverse: right to left in ltr left to right in rtl
				column: same as row but top to bottom
				column-reverse: same as row-reverse but bottom to top
	*/
	display flex
	display -webkit-flex
	
	flex-direction $direction
	-webkit-flex-direction $direction
}

flexWrap($wrap = "nowrap") {
	/* 
		By default, flex items will all try to fit onto one line. 
		You can change that and allow the items to wrap as needed 
		with this property.
			
			OPTIONS:
			    nowrap (default): all flex items will be on one line
			    wrap: flex items will wrap onto multiple lines, from top to bottom.
			    wrap-reverse: flex items will wrap onto multiple lines from bottom to top.
	*/
	display flex
	display -webkit-flex
	
	-webkit-flex-wrap $wrap
	flex-wrap $wrap
}
 
flexJC($jC = "flex-start") {
	/* 
		This defines the alignment along the main axis. It helps distribute 
		extra free space left over when either all the flex items on a line 
		are inflexible, or are flexible but have reached their maximum size. 
		It also exerts some control over the alignment of items when they 
		overflow the line.
			
			OPTIONS:
				flex-start (default): items are packed toward the start line
				flex-end: items are packed toward to end line
				center: items are centered along the line
				space-between: items are evenly distributed in the line first item is on the start line, last item on the end line
				space-around: items are evenly distributed in the line with equal space around them. Note that visually the spaces aren't equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has its own spacing that applies.
				space-evenly: items are distributed so that the spacing between any two items (and the space to the edges) is equal.
	*/
	display flex
	display -webkit-flex
	
	justify-content $jC
	-webkit-justify-content $jC
}
 
flexAI($aI = "stretch") {
	/* 
		This defines the default behaviour for how flex items are laid out 
		along the cross axis on the current line. Think of it as the justify-content 
		version for the cross-axis (perpendicular to the main-axis).
			
			OPTIONS:
			    stretch (default): stretch to fill the container (still respect min-width/max-width)
			    flex-start: cross-start margin edge of the items is placed on the cross-start line
			    flex-end: cross-end margin edge of the items is placed on the cross-end line
			    center: items are centered in the cross-axis
			    baseline: items are aligned such as their baselines align
	*/
	display flex
	display -webkit-flex
	
	align-items $aI
}

flexAC($aC = "stretch") {
	/* 
		This aligns a flex container's lines within when there is extra space 
		in the cross-axis, similar to how justify-content aligns individual 
		items within the main-axis.

		Note: this property has no effect when there is only one line of flex items.
			
			OPTIONS:
				stretch (default): lines stretch to take up the remaining space
				flex-start: lines packed to the start of the container
				flex-end: lines packed to the end of the container
				center: lines packed to the center of the container
				space-between: lines evenly distributed the first line is at the start of the container while the last one is at the end
				space-around: lines evenly distributed with equal space around each line
	*/
	display flex
	display -webkit-flex
	
	align-content $calign
}
